---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name : Terraform AZURE KUBERNETES SERVICE

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-azure-aks

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v1.1.7-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"

#  description of this project
description: |-
  Terraform module to create Azure kubernetes service resource on AZURE.
# extra content
include:
  - "terraform.md"

# How to use this project
# How to use this project
usage: |-
  Here are some examples of how you can use this module in your inventory structure:
  ### private_cluster
  ```hcl
    module "aks" {
    source               = "clouddrove/aks/azure"
    name                 = "app"
    environment          = "test"
    resource_group_name = module.resource_group.resource_group_name
    location            = module.resource_group.resource_group_location

    kubernetes_version = "1.25.5"
    default_node_pool = {
      name                  = "agentpool"
      max_pods              = 200
      os_disk_size_gb       = 64
      vm_size               = "Standard_B2s"
      count                 = 1
      enable_node_public_ip = false
    }


    ##### if requred more than one node group.
    nodes_pools = [
      {
        name                  = "nodegroup1"
        max_pods              = 200
        os_disk_size_gb       = 64
        vm_size               = "Standard_B2s"
        count                 = 1
        enable_node_public_ip = false
        mode                  = "User"
      },

    ]

    #networking
    vnet_id         = join("", module.vnet.vnet_id)
    nodes_subnet_id = module.subnet.default_subnet_id[0]
    # acr_id       = "****" #pass this value if you  want aks to pull image from acr else remove it
    #  key_vault_id = module.vault.id #pass this value of variable 'cmk_enabled = true' if you want to enable Encryption with a Customer-managed key else remove it.

    #### enable diagnostic setting.
    microsoft_defender_enabled = true
    diagnostic_setting_enable  = true
    log_analytics_workspace_id = module.log-analytics.workspace_id # when diagnostic_setting_enable = true && oms_agent_enabled = true
  }
    ```
  # public_cluster
  ```hcl
    module "aks" {
    source               = "clouddrove/aks/azure"
    name                 = "app"
    environment          = "test"
    resource_group_name = module.resource_group.resource_group_name
    location            = module.resource_group.resource_group_location

    kubernetes_version      = "1.25.5"
    private_cluster_enabled = false
    default_node_pool = {
      name                  = "agentpool1"
      max_pods              = 200
      os_disk_size_gb       = 64
      vm_size               = "Standard_B4ms"
      count                 = 1
      enable_node_public_ip = false
    }


    ##### if requred more than one node group.
    nodes_pools = [
      {
        name                  = "nodegroup2"
        max_pods              = 200
        os_disk_size_gb       = 64
        vm_size               = "Standard_B4ms"
        count                 = 1
        enable_node_public_ip = false
        mode                  = "User"
      },
    ]

    #networking
    vnet_id         = join("", module.vnet.vnet_id)
    nodes_subnet_id = module.subnet.default_subnet_id[0]

    # acr_id       = "****" #pass this value if you  want aks to pull image from acr else remove it
    #  key_vault_id = module.vault.id #pass this value of variable 'cmk_enabled = true' if you want to enable Encryption with a Customer-managed key else remove it.

    #### enable diagnostic setting.
    microsoft_defender_enabled = true
    diagnostic_setting_enable  = true
    log_analytics_workspace_id = module.log-analytics.workspace_id # when diagnostic_setting_enable = true && oms_agent_enabled = true
  }
    ```


